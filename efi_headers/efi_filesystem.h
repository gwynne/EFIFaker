//
//  efi_filesystem.h
//
//  Created by Gwynne Raskind on 3/9/14.
//  Copyright (c) 2014 Gwynne Raskind. All rights reserved.
//

#ifndef EFI_efi_filesystem_h
#define EFI_efi_filesystem_h

enum {
	EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_REVISION = 0x00010000,
	EFI_FILE_PROTOCOL_REVISION = 0x00010000,
};

#define EFI_FILE_MODE_READ			0x0000000000000001
#define EFI_FILE_MODE_WRITE			0x0000000000000002
#define EFI_FILE_MODE_CREATE		0x8000000000000000

#define EFI_FILE_READ_ONLY			0x0000000000000001
#define EFI_FILE_HIDDEN				0x0000000000000002
#define EFI_FILE_SYSTEM				0x0000000000000004
#define EFI_FILE_RESERVED			0x0000000000000008
#define EFI_FILE_DIRECTORY			0x0000000000000010
#define EFI_FILE_ARCHIVE			0x0000000000000020
#define EFI_FILE_VALID_ATTR			0x0000000000000037

extern EFI_GUID	EFI_DEVICE_PATH_PROTOCOL_GUID,			EFI_DEVICE_PATH_TO_TEXT_PROTOCOL_GUID,		EFI_LOAD_FILE_PROTOCOL_GUID,
				EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_GUID,	EFI_FILE_INFO_GUID,							EFI_FILE_SYSTEM_INFO_GUID;

EFI_GUID
		EFI_DEVICE_PATH_PROTOCOL_GUID				= { 0x09576e91, 0x6d3f, 0x11d2, { 0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b } },
		EFI_DEVICE_PATH_TO_TEXT_PROTOCOL_GUID		= { 0x8b843e20, 0x8132, 0x4852, { 0x90, 0xcc, 0x55, 0x1a, 0x4e, 0x4a, 0x7f, 0x1c } },
		EFI_LOAD_FILE_PROTOCOL_GUID					= { 0x56ec3091, 0x954c, 0x11d2, { 0x8e, 0x3f, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b } },
		EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_GUID		= { 0x964e5b22, 0x6459, 0x11d2, { 0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b } },
		EFI_FILE_INFO_GUID							= { 0x09576e92, 0x6d3f, 0x11d2, { 0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b } },
		EFI_FILE_SYSTEM_INFO_GUID					= { 0x09576e93, 0x6d3f, 0x11d2, { 0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b } };


typedef struct {
	UINT64						Size;
	UINT64						FileSize;
	UINT64						PhysicalSize;
	EFI_TIME					CreateTime;
	EFI_TIME					LastAccessTime;
	EFI_TIME					ModificationTime;
	UINT64						Attribute;
//	CHAR16						FileName[];
} EFI_FILE_INFO;

typedef struct {
	UINT64						Size;
	BOOLEAN						ReadOnly;
	UINT64						VolumeSize;
	UINT64						FreeSpace;
	UINT32						BlockSize;
//	CHAR16						VolumeLabe[];
} EFI_FILE_SYSTEM_INFO;


typedef struct EFI_DEVICE_PATH_PROTOCOL {
	UINT8				Type;
	UINT8				SubType;
	UINT8				Length[2];
} EFI_DEVICE_PATH_PROTOCOL;

typedef struct EFI_LOAD_FILE_PROTOCOL {
	EFI_STATUS					(EFIAPI *LoadFile)(IN struct EFI_LOAD_FILE_PROTOCOL *, IN EFI_DEVICE_PATH_PROTOCOL *, IN BOOLEAN, IN OUT UINTN *BufferSize, IN VOID *Buffer OPTIONAL);
} EFI_LOAD_FILE_PROTOCOL;

typedef struct EFI_FILE_PROTOCOL {
	UINT64						Revision;
	EFI_STATUS					(EFIAPI *Open)(IN struct EFI_FILE_PROTOCOL *, OUT struct EFI_FILE_PROTOCOL **, IN CHAR16 *, IN UINT64, IN UINT64);
	EFI_STATUS					(EFIAPI *Close)(IN struct EFI_FILE_PROTOCOL *);
	EFI_STATUS					(EFIAPI *Delete)(IN struct EFI_FILE_PROTOCOL *);
	EFI_STATUS					(EFIAPI *Read)(IN struct EFI_FILE_PROTOCOL *, IN OUT UINTN, OUT VOID *);
	EFI_STATUS					(EFIAPI *Write)(IN struct EFI_FILE_PROTOCOL *, IN OUT UINTN, IN VOID *);
	EFI_STATUS					(EFIAPI *SetPosition)(IN struct EFI_FILE_PROTOCOL *, IN UINT64);
	EFI_STATUS					(EFIAPI *GetPosition)(IN struct EFI_FILE_PROTOCOL *, OUT UINT64 *);
	EFI_STATUS					(EFIAPI *GetInfo)(IN struct EFI_FILE_PROTOCOL *, IN EFI_GUID *, IN OUT UINTN *, OUT UINTN *);
	EFI_STATUS					(EFIAPI *SetInfo)(IN struct EFI_FILE_PROTOCOL *, IN EFI_GUID *, IN UINTN, IN VOID *);
	EFI_STATUS					(EFIAPI *Flush)(IN struct EFI_FILE_PROTOCOL *);
} EFI_FILE_PROTOCOL;

typedef struct EFI_SIMPLE_FILE_SYSTEM_PROTOCOL {
	UINT64						Revision;
	EFI_STATUS					(EFIAPI *OpenVolume)(IN struct EFI_SIMPLE_FILE_SYSTEM_PROTOCOL *, OUT EFI_FILE_PROTOCOL **);
} EFI_SIMPLE_FILE_SYSTEM_PROTOCOL;

typedef struct EFI_DEVICE_PATH_TO_TEXT_PROTOCOL {
	CHAR16								*(EFIAPI *ConvertDeviceNodeToText)(IN CONST EFI_DEVICE_PATH_PROTOCOL *, IN BOOLEAN, IN BOOLEAN);
	CHAR16								*(EFIAPI *ConvertDevicePathToText)(IN CONST EFI_DEVICE_PATH_PROTOCOL *, IN BOOLEAN, IN BOOLEAN);
} EFI_DEVICE_PATH_TO_TEXT_PROTOCOL;

#endif
