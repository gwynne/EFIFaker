//
//  efi_simple_text.h
//
//  Created by Gwynne Raskind on 3/9/14.
//  Copyright (c) 2014 Gwynne Raskind. All rights reserved.
//

#ifndef EFI_efi_simple_text_h
#define EFI_efi_simple_text_h

#include "efi_types.h"

extern EFI_GUID	EFI_SIMPLE_TEXT_INPUT_PROTOCOL_GUID,	EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL_GUID,		EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL_GUID;

EFI_GUID
		EFI_SIMPLE_TEXT_INPUT_PROTOCOL_GUID			= { 0x387477c1, 0x69c7, 0x11d2, { 0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b } },
		EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL_GUID		= { 0xdd9e7534, 0x7762, 0x4698, { 0x8c, 0x14, 0xf5, 0x85, 0x17, 0xa6, 0x25, 0xaa } },
		EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL_GUID		= { 0x387477c2, 0x69c7, 0x11d2, { 0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b } };

typedef struct {
	INT32						MaxMode;
	INT32						Mode;
	INT32						Attribute;
	INT32						CursorColumn;
	INT32						CursorRow;
	BOOLEAN						CursorVisible;
	UINT8						__Padding[3];
} SIMPLE_TEXT_OUTPUT_MODE;

typedef struct EFI_SIMPLE_TEXT_INPUT_PROTOCOL {
	EFI_STATUS			(EFIAPI *Reset)(IN struct EFI_SIMPLE_TEXT_INPUT_PROTOCOL *, IN BOOLEAN);
	EFI_STATUS			(EFIAPI *ReadKeyStroke)(IN struct EFI_SIMPLE_TEXT_INPUT_PROTOCOL *, OUT EFI_INPUT_KEY *);
	EFI_EVENT			WaitForKey;
} EFI_SIMPLE_TEXT_INPUT_PROTOCOL;

typedef struct EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL {
	EFI_STATUS			(EFIAPI *Reset)(IN struct EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL *, IN BOOLEAN);
	EFI_STATUS			(EFIAPI *ReadKeyStrokeEx)(IN struct EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL *, OUT EFI_KEY_DATA *);
	EFI_EVENT			WaitForKeyEx;
	EFI_STATUS			(EFIAPI *SetState)(IN struct EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL *, IN EFI_KEY_TOGGLE_STATE *);
	EFI_STATUS			(EFIAPI *RegisterKeyNotify)(IN struct EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL *, IN EFI_KEY_DATA , IN EFI_KEY_NOTIFY_FUNCTION, OUT VOID **);
	EFI_STATUS			(EFIAPI *UnregisterKeyNotify)(IN struct EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL *, IN VOID *);
} EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL;

typedef struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL {
	EFI_STATUS					(EFIAPI *Reset)(IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, IN BOOLEAN);
	EFI_STATUS					(EFIAPI *OutputString)(IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, IN CHAR16 *);
	EFI_STATUS					(EFIAPI *TestString)(IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, IN CHAR16 *);
	EFI_STATUS					(EFIAPI *QueryMode)(IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, IN UINTN, OUT UINTN *, OUT UINTN *);
	EFI_STATUS					(EFIAPI *SetMode)(IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, IN UINTN);
	EFI_STATUS					(EFIAPI *SetAttribute)(IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, IN UINTN);
	EFI_STATUS					(EFIAPI *ClearScreen)(IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *);
	EFI_STATUS					(EFIAPI *SetCursorPosition)(IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, IN UINTN, IN UINTN);
	EFI_STATUS					(EFIAPI *EnableCursor)(IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *, IN BOOLEAN);
	SIMPLE_TEXT_OUTPUT_MODE		*Mode;
} EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL;

#endif
